//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/OCSUnityController/InputActions/Backhoe/BackhoeInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @BackhoeInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @BackhoeInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""BackhoeInput"",
    ""maps"": [
        {
            ""name"": ""Backhoe"",
            ""id"": ""799c3536-2610-4538-b6ef-fcd9afc2a62d"",
            ""actions"": [
                {
                    ""name"": ""LeftCrawlerThrottle"",
                    ""type"": ""PassThrough"",
                    ""id"": ""66decee2-19aa-4c2e-9902-dedcd8d167b6"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftCrawlerReverse"",
                    ""type"": ""Button"",
                    ""id"": ""003218f8-98f9-4a0c-a321-8cb2b9033671"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightCrawlerThrottle"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e9ec336b-3db6-4e06-8c73-cd7d7b80d5dc"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightCrawlerReverse"",
                    ""type"": ""Button"",
                    ""id"": ""5292ad8e-22c7-4c65-a700-1fd4e5b9c79e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Body"",
                    ""type"": ""PassThrough"",
                    ""id"": ""bf787ee8-3d00-4fbd-850c-d5f0ae65e44a"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Boom"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7569d603-6ff5-4e10-a63c-65a554a1de58"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Arm"",
                    ""type"": ""PassThrough"",
                    ""id"": ""2f1f1909-3afa-47d0-bcb3-b7856d0bbb7f"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Bucket"",
                    ""type"": ""PassThrough"",
                    ""id"": ""fbad79d4-7c2c-419a-aa4b-b2b418dfad0b"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8f29a8e4-052d-49e3-9ae4-6791d6e22509"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftCrawlerThrottle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""23e81460-055d-42bd-abaa-5f790392c9fc"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftCrawlerReverse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""45329150-373e-4824-9ad9-8a3d5ebd5120"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightCrawlerThrottle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fbc06d03-db2f-4c17-803e-9bcf4d5ac564"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightCrawlerReverse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e2a310f-a9e3-4dfd-b9c7-5f7da5fdd486"",
                    ""path"": ""<Gamepad>/leftStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Body"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b0f852e8-a19c-4fab-ab19-78d2bd3402c3"",
                    ""path"": ""<Gamepad>/rightStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Boom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""365cedc1-dfed-438a-b2e1-034cb52fcd52"",
                    ""path"": ""<Gamepad>/leftStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""835365a8-1b00-4575-9ded-1b16c55ee83e"",
                    ""path"": ""<Gamepad>/rightStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Bucket"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Backhoe
        m_Backhoe = asset.FindActionMap("Backhoe", throwIfNotFound: true);
        m_Backhoe_LeftCrawlerThrottle = m_Backhoe.FindAction("LeftCrawlerThrottle", throwIfNotFound: true);
        m_Backhoe_LeftCrawlerReverse = m_Backhoe.FindAction("LeftCrawlerReverse", throwIfNotFound: true);
        m_Backhoe_RightCrawlerThrottle = m_Backhoe.FindAction("RightCrawlerThrottle", throwIfNotFound: true);
        m_Backhoe_RightCrawlerReverse = m_Backhoe.FindAction("RightCrawlerReverse", throwIfNotFound: true);
        m_Backhoe_Body = m_Backhoe.FindAction("Body", throwIfNotFound: true);
        m_Backhoe_Boom = m_Backhoe.FindAction("Boom", throwIfNotFound: true);
        m_Backhoe_Arm = m_Backhoe.FindAction("Arm", throwIfNotFound: true);
        m_Backhoe_Bucket = m_Backhoe.FindAction("Bucket", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Backhoe
    private readonly InputActionMap m_Backhoe;
    private IBackhoeActions m_BackhoeActionsCallbackInterface;
    private readonly InputAction m_Backhoe_LeftCrawlerThrottle;
    private readonly InputAction m_Backhoe_LeftCrawlerReverse;
    private readonly InputAction m_Backhoe_RightCrawlerThrottle;
    private readonly InputAction m_Backhoe_RightCrawlerReverse;
    private readonly InputAction m_Backhoe_Body;
    private readonly InputAction m_Backhoe_Boom;
    private readonly InputAction m_Backhoe_Arm;
    private readonly InputAction m_Backhoe_Bucket;
    public struct BackhoeActions
    {
        private @BackhoeInput m_Wrapper;
        public BackhoeActions(@BackhoeInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftCrawlerThrottle => m_Wrapper.m_Backhoe_LeftCrawlerThrottle;
        public InputAction @LeftCrawlerReverse => m_Wrapper.m_Backhoe_LeftCrawlerReverse;
        public InputAction @RightCrawlerThrottle => m_Wrapper.m_Backhoe_RightCrawlerThrottle;
        public InputAction @RightCrawlerReverse => m_Wrapper.m_Backhoe_RightCrawlerReverse;
        public InputAction @Body => m_Wrapper.m_Backhoe_Body;
        public InputAction @Boom => m_Wrapper.m_Backhoe_Boom;
        public InputAction @Arm => m_Wrapper.m_Backhoe_Arm;
        public InputAction @Bucket => m_Wrapper.m_Backhoe_Bucket;
        public InputActionMap Get() { return m_Wrapper.m_Backhoe; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BackhoeActions set) { return set.Get(); }
        public void SetCallbacks(IBackhoeActions instance)
        {
            if (m_Wrapper.m_BackhoeActionsCallbackInterface != null)
            {
                @LeftCrawlerThrottle.started -= m_Wrapper.m_BackhoeActionsCallbackInterface.OnLeftCrawlerThrottle;
                @LeftCrawlerThrottle.performed -= m_Wrapper.m_BackhoeActionsCallbackInterface.OnLeftCrawlerThrottle;
                @LeftCrawlerThrottle.canceled -= m_Wrapper.m_BackhoeActionsCallbackInterface.OnLeftCrawlerThrottle;
                @LeftCrawlerReverse.started -= m_Wrapper.m_BackhoeActionsCallbackInterface.OnLeftCrawlerReverse;
                @LeftCrawlerReverse.performed -= m_Wrapper.m_BackhoeActionsCallbackInterface.OnLeftCrawlerReverse;
                @LeftCrawlerReverse.canceled -= m_Wrapper.m_BackhoeActionsCallbackInterface.OnLeftCrawlerReverse;
                @RightCrawlerThrottle.started -= m_Wrapper.m_BackhoeActionsCallbackInterface.OnRightCrawlerThrottle;
                @RightCrawlerThrottle.performed -= m_Wrapper.m_BackhoeActionsCallbackInterface.OnRightCrawlerThrottle;
                @RightCrawlerThrottle.canceled -= m_Wrapper.m_BackhoeActionsCallbackInterface.OnRightCrawlerThrottle;
                @RightCrawlerReverse.started -= m_Wrapper.m_BackhoeActionsCallbackInterface.OnRightCrawlerReverse;
                @RightCrawlerReverse.performed -= m_Wrapper.m_BackhoeActionsCallbackInterface.OnRightCrawlerReverse;
                @RightCrawlerReverse.canceled -= m_Wrapper.m_BackhoeActionsCallbackInterface.OnRightCrawlerReverse;
                @Body.started -= m_Wrapper.m_BackhoeActionsCallbackInterface.OnBody;
                @Body.performed -= m_Wrapper.m_BackhoeActionsCallbackInterface.OnBody;
                @Body.canceled -= m_Wrapper.m_BackhoeActionsCallbackInterface.OnBody;
                @Boom.started -= m_Wrapper.m_BackhoeActionsCallbackInterface.OnBoom;
                @Boom.performed -= m_Wrapper.m_BackhoeActionsCallbackInterface.OnBoom;
                @Boom.canceled -= m_Wrapper.m_BackhoeActionsCallbackInterface.OnBoom;
                @Arm.started -= m_Wrapper.m_BackhoeActionsCallbackInterface.OnArm;
                @Arm.performed -= m_Wrapper.m_BackhoeActionsCallbackInterface.OnArm;
                @Arm.canceled -= m_Wrapper.m_BackhoeActionsCallbackInterface.OnArm;
                @Bucket.started -= m_Wrapper.m_BackhoeActionsCallbackInterface.OnBucket;
                @Bucket.performed -= m_Wrapper.m_BackhoeActionsCallbackInterface.OnBucket;
                @Bucket.canceled -= m_Wrapper.m_BackhoeActionsCallbackInterface.OnBucket;
            }
            m_Wrapper.m_BackhoeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LeftCrawlerThrottle.started += instance.OnLeftCrawlerThrottle;
                @LeftCrawlerThrottle.performed += instance.OnLeftCrawlerThrottle;
                @LeftCrawlerThrottle.canceled += instance.OnLeftCrawlerThrottle;
                @LeftCrawlerReverse.started += instance.OnLeftCrawlerReverse;
                @LeftCrawlerReverse.performed += instance.OnLeftCrawlerReverse;
                @LeftCrawlerReverse.canceled += instance.OnLeftCrawlerReverse;
                @RightCrawlerThrottle.started += instance.OnRightCrawlerThrottle;
                @RightCrawlerThrottle.performed += instance.OnRightCrawlerThrottle;
                @RightCrawlerThrottle.canceled += instance.OnRightCrawlerThrottle;
                @RightCrawlerReverse.started += instance.OnRightCrawlerReverse;
                @RightCrawlerReverse.performed += instance.OnRightCrawlerReverse;
                @RightCrawlerReverse.canceled += instance.OnRightCrawlerReverse;
                @Body.started += instance.OnBody;
                @Body.performed += instance.OnBody;
                @Body.canceled += instance.OnBody;
                @Boom.started += instance.OnBoom;
                @Boom.performed += instance.OnBoom;
                @Boom.canceled += instance.OnBoom;
                @Arm.started += instance.OnArm;
                @Arm.performed += instance.OnArm;
                @Arm.canceled += instance.OnArm;
                @Bucket.started += instance.OnBucket;
                @Bucket.performed += instance.OnBucket;
                @Bucket.canceled += instance.OnBucket;
            }
        }
    }
    public BackhoeActions @Backhoe => new BackhoeActions(this);
    public interface IBackhoeActions
    {
        void OnLeftCrawlerThrottle(InputAction.CallbackContext context);
        void OnLeftCrawlerReverse(InputAction.CallbackContext context);
        void OnRightCrawlerThrottle(InputAction.CallbackContext context);
        void OnRightCrawlerReverse(InputAction.CallbackContext context);
        void OnBody(InputAction.CallbackContext context);
        void OnBoom(InputAction.CallbackContext context);
        void OnArm(InputAction.CallbackContext context);
        void OnBucket(InputAction.CallbackContext context);
    }
}
